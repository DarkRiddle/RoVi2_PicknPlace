#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <inc.hpp>
//#include <opencv2/imgproc/imgproc.hpp>
//#include <opencv2/highgui/highgui.hpp>
//#include <iostream>
#include <fstream>
#include <cv_bridge/cv_bridge.h>
//vision
#include "findContour.hpp"
#include "detectColour.hpp"
#include "detectFeature.hpp"
#include "util.hpp"
//using namespace cv;	//already defined
using namespace ros;
using namespace image_transport;

void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
  try
  {
  imshow("view", cv_bridge::toCvShare(msg, "bgr8")->image);

  cvtColor(cv_bridge::toCvShare(msg, "bgr8")->image,cv_HSV,COLOR_RGB2HSV);

  waitKey(3);
  }
  catch (cv_bridge::Exception& e)
  {
    ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg->encoding.c_str());
  }
}

int main(int argc, char **argv)
{
  init(argc, argv, "image_listener");
  NodeHandle nh;
  namedWindow("view",WINDOW_NORMAL);
 
  startWindowThread();
  ImageTransport it(nh);
  Subscriber sub = it.subscribe("stereo_camera/left/image_raw", 1, imageCallback);
  spin();
  destroyWindow("view");
  
}
